<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RepoDb</name>
    </assembly>
    <members>
        <member name="T:RepoDb.Attributes.ForeignAttribute">
            <summary>
            An attribute used to define a foreign relationship for the recursive property of the <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.ForeignAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.ForeignAttribute</i> object.
            </summary>
            <param name="childFieldName">The field name for the child <i>DataEntity</i> object.</param>
        </member>
        <member name="M:RepoDb.Attributes.ForeignAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.ForeignAttribute</i> object.
            </summary>
            <param name="parentFieldName">The field name for the parent <i>DataEntity</i> object.</param>
            <param name="childFieldName">The field name for the child <i>DataEntity</i> object.</param>
        </member>
        <member name="P:RepoDb.Attributes.ForeignAttribute.ChildFieldName">
            <summary>
            Gets the field name of the child data entity.
            </summary>
        </member>
        <member name="P:RepoDb.Attributes.ForeignAttribute.ParentFieldName">
            <summary>
            Gets the field name of the parent data entity.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.IgnoreAttribute">
            <summary>
            An attribute used to define a class property or any <i>DataEntity</i> object properties to be marked as ignoreable
            during the actual repository operation.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.IgnoreAttribute.#ctor(RepoDb.Enumerations.Command)">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.IgnoreAttribute</i> object.
            </summary>
            <param name="command">The target operation command where to ignore the property.</param>
        </member>
        <member name="P:RepoDb.Attributes.IgnoreAttribute.Command">
            <summary>
            Gets the target operation command where the property is being ignored by the operation.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.MapAttribute">
            <summary>
            An attribute class used to define a mapping of the current class/property equivalent to an object/field name in the database.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.MapAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.MapAttribute</i> object.
            </summary>
            <param name="name">The name of the mapping that is equivalent to the database object/field.</param>
        </member>
        <member name="P:RepoDb.Attributes.MapAttribute.Name">
            <summary>
            Gets the name of the mapping that is equivalent to the database object/field.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.PrimaryAttribute">
            <summary>
            An attribute used to define a primary property for the <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.PrimaryAttribute.#ctor">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.PrimaryAttribute</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.Attributes.TextAttribute">
            <summary>
            An attribute used to define a text value on any object.
            </summary>
        </member>
        <member name="M:RepoDb.Attributes.TextAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Attributes.TextAttribute</i> object.
            </summary>
            <param name="text">A value of the text.</param>
        </member>
        <member name="P:RepoDb.Attributes.TextAttribute.Text">
            <summary>
            Gets a value of the text.
            </summary>
        </member>
        <member name="T:RepoDb.Constant">
            <summary>
            A class that holds the constant values for <i>RepoDb</i> library.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.CacheItemExpirationInMinutes">
            <summary>
            The default value of the cache expiration in minutes.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.RecursiveQueryBatchCount">
            <summary>
            The batches used when querying the data from the database in the recursive query operation.
            </summary>
        </member>
        <member name="F:RepoDb.Constant.RecursiveMaxRecursion">
            <summary>
            The maximum recursion for the recursive query operation.
            </summary>
        </member>
        <member name="T:RepoDb.DataEntityChildItemData">
            <summary>
            A class that handles the information of the <i>DataEntity</i> child item data.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityChildItemData.#ctor(System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.DataEntityChildItemData</i> object.
            </summary>
            <param name="dataEntity">The instance of the <i>DataEntity</i> object.</param>
        </member>
        <member name="P:RepoDb.DataEntityChildItemData.Key">
            <summary>
            Gets or sets the primary key value of the <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityChildItemData.DataEntity">
            <summary>
            Gets the <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.ConnectionPersistency">
            <summary>
            An enumeration that defines the persistency of the <i>System.Data.Common.DbConnection</i> object used by the repository.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.PerCall">
            <summary>
            A new connection is being created on every call of the repository operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.ConnectionPersistency.Instance">
            <summary>
            A single connection is being used until the lifetime of the repository.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Conjunction">
            <summary>
            An enumeration used to define a conjuction for the query grouping. This enumeration is used at <i>RepoDb.QueryGroup</i> object.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.And">
            <summary>
            The (AND) conjunction.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Conjunction.Or">
            <summary>
            The (OR) conjunction.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Order">
            <summary>
            An enumeration used to define the ordering of the query field.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Ascending">
            <summary>
            The ascending order.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Order.Descending">
            <summary>
            The descending order.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Command">
            <summary>
            An enumeration used to define the commands for every operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.None">
            <summary>
            No defined command and is applicable to every commands.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Query">
            <summary>
            A command that is being used when querying a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Insert">
            <summary>
            A command that is being used when inserting a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Update">
            <summary>
            A command that is being used when updating a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Delete">
            <summary>
            A command that is being used when deleting a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Merge">
            <summary>
            A command that is being used when merging a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.BatchQuery">
            <summary>
            A command that is being used when batch-querying a data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.InlineUpdate">
            <summary>
            A command that is being used when doing an inline update on the data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.BulkInsert">
            <summary>
            A command that is being used when updating a data by targetting certain fields only.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Count">
            <summary>
            A command that is being used when counting the data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.DeleteAll">
            <summary>
            A command that is being used when deleting all data.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.InlineInsert">
            <summary>
            A command that is being used when inserting a data by targetting certain fields only.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.InlineMerge">
            <summary>
            A command that is being used when merging a data by targetting certain fields only.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Command.Truncate">
            <summary>
            A command that is being used when truncating a table.
            </summary>
        </member>
        <member name="T:RepoDb.Enumerations.Operation">
            <summary>
            An enumeration used to define an operation on the query expression.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Equal">
            <summary>
            An equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotEqual">
            <summary>
            A not-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThan">
            <summary>
            A less-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThan">
            <summary>
            A greater-than operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.LessThanOrEqual">
            <summary>
            A less-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.GreaterThanOrEqual">
            <summary>
            A greater-than-or-equal operation.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Like">
            <summary>
            A like operation. Defines the <i>LIKE</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotLike">
            <summary>
            A not-like operation. Defines the <i>NOT LIKE</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Between">
            <summary>
            A between operation. Defines the <i>BETWEEN</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotBetween">
            <summary>
            A not-between operation. Defines the <i>NOT BETWEEN</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.In">
            <summary>
            An in operation. Defines the <i>IN</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.NotIn">
            <summary>
            A non-in operation. Defines the <i>NOT IN</i> keyword in SQL Statement.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.All">
            <summary>
            An (AND) equation and operation. This defines that all query expression must be true.
            </summary>
        </member>
        <member name="F:RepoDb.Enumerations.Operation.Any">
            <summary>
            An (OR) equation and operation. This defines that any query expression must be true.
            </summary>
        </member>
        <member name="T:RepoDb.Exceptions.NoMatchedFieldsException">
            <summary>
            An exception that is being thrown when the operation extraction of the <i>System.Data.Common.DbDataReader</i> into <i>DataEntity</i> object 
            does not matched atleast one of the field from the result set.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.NoMatchedFieldsException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.NoMatchedFieldsException</i> object.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.InvalidQueryExpressionException">
            <summary>
            An exception that is being thrown when the query expression passed is not valid.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.InvalidQueryExpressionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.InvalidQueryExpressionException</i> object.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.DuplicateDataEntityMapException">
            <summary>
            An exception that is being thrown if the duplicate mapping for data entity is found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.DuplicateDataEntityMapException.#ctor(RepoDb.Enumerations.Command)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.DuplicateDataEntityMapException</i> object.
            </summary>
            <param name="command">The command of the data entity mapping.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotBigCountableException">
            <summary>
            An exception that is being thrown if the data entity is not countable (big).
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotBigCountableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotBigCountableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotCountableException">
            <summary>
            An exception that is being thrown if the data entity is not countable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotCountableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotCountableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotBatchQueryableException">
            <summary>
            An exception that is being thrown if the data entity is not batch queryable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotBatchQueryableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotBatchQueryableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.DataEntityMapException">
            <summary>
            An exception that is being thrown for any data entity mapping related exception.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.DataEntityMapException.#ctor(RepoDb.Enumerations.Command)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.DataEntityMapException</i> object.
            </summary>
            <param name="command">The command of the data entity mapping.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotInlineInsertableException">
            <summary>
            An exception that is being thrown if the data entity is not inline insertable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotInlineInsertableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotInlineInsertableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotInlineMergeableException">
            <summary>
            An exception that is being thrown if the data entity is not inline mergeable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotInlineMergeableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotInlineMergeableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotInlineUpdateableException">
            <summary>
            An exception that is being thrown if the data entity is not inline updateable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotInlineUpdateableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotInlineUpdateableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.PrimaryFieldNotFoundException">
            <summary>
            An exception that is being thrown of the validation for primary key has been called and the primary key is not
            found from the data entity.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.PrimaryFieldNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.PrimaryFieldNotFoundException</i> object.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.CancelledExecutionException">
            <summary>
            An exception that is being thrown when the operation has been cancelled during the tracing.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.CancelledExecutionException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.CancelledExecutionException</i> object.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.DuplicateTypeMapException">
            <summary>
            An exception that is being thrown if the duplicate type mapping is found.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.DuplicateTypeMapException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.DuplicateTypeMapException</i> object.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotBulkInsertableException">
            <summary>
            An exception that is being thrown if the data entity is not bulk insertable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotBulkInsertableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotBulkInsertableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotInsertableException">
            <summary>
            An exception that is being thrown if the data entity is not insertable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotInsertableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotInsertableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotMergeableException">
            <summary>
            An exception that is being thrown if the data entity is not mergeable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotMergeableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotMergeableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotUpdateableException">
            <summary>
            An exception that is being thrown if the data entity is not updateable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotUpdateableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotUpdateableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotDeletableException">
            <summary>
            An exception that is being thrown if the data entity is not deletable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotDeletableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotDeletableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.Exceptions.EntityNotQueryableException">
            <summary>
            An exception that is being thrown if the data entity is not queryable.
            </summary>
        </member>
        <member name="M:RepoDb.Exceptions.EntityNotQueryableException.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Exceptions.EntityNotQueryableException</i> object.
            </summary>
            <param name="name">The type name or the mapped name of the entity.</param>
        </member>
        <member name="T:RepoDb.IsPrimaryIdentityCache">
            <summary>
            A static class used to get the cached value of <i>RepoDb.DataEntity</i> primary property <i>IsIdentity</i> identification.
            </summary>
        </member>
        <member name="M:RepoDb.IsPrimaryIdentityCache.Get``1(System.String,RepoDb.Enumerations.Command)">
            <summary>
            Gets the <i>RepoDb.Attributes.MapAttribute.Name</i> value implemented on the data entity on a target command.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="connectionString">The connection string object to be used.</param>
            <param name="command">The target command.</param>
            <returns>A boolean value indicating the identification of the column.</returns>
        </member>
        <member name="T:RepoDb.DataEntityListDataReader`1">
            <summary>
            A data reader object used to manipulate the enumerable list of <i>DataEntity</i> objects.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i></typeparam>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.#ctor(System.Collections.Generic.IEnumerable{`0},RepoDb.Enumerations.Command)">
            <summary>
            Creates a new instance of <i>RepoDb.DataEntityListDataReader</i> object.
            </summary>
            <param name="entities">The list of the <i>DataEntity</i> object to be used for manipulation.</param>
            <param name="command">The type of command to be used by this data reader.</param>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <i>DataEntity</i> objects.
            </summary>
            <returns>The enumerator object of the current collection.</returns>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Enumerator">
            <summary>
            Returns an enumerator that iterates through a collection of <i>DataEntity</i> objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Entities">
            <summary>
            Gets the list of <i>DataEntity</i> objects.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Properties">
            <summary>
            Gets the properties of <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Position">
            <summary>
            Gets the current position of the enumerator.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Item(System.Int32)">
            <summary>
            Gets the current value from the index.
            </summary>
            <param name="i">The index of the column.</param>
            <returns>The value from the column index.</returns>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Item(System.String)">
            <summary>
            Gets the current value from the name.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The value from the column name.</returns>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.Depth">
            <summary>
            Gets the depth value.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.IsClosed">
            <summary>
            Gets the value that indicates whether the current reader is closed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.IsDisposed">
            <summary>
            Gets the value that indicates whether the current reader is already disposed.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.RecordsAffected">
            <summary>
            Gets the number of rows affected by the iteration.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.FieldCount">
            <summary>
            Gets the number of properties the <i>DataEntity</i> object has.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityListDataReader`1.HasRows">
            <summary>
            Gets a value that signify whether the current data reader has data entities.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.Close">
            <summary>
            Closes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.Dispose">
            <summary>
            Disposes the current data reader.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.Reset">
            <summary>
            Resets the pointer of the position to the beginning.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetBoolean(System.Int32)">
            <summary>
            Gets the boolean value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetByte(System.Int32)">
            <summary>
            Gets the byte value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            GetBytes
            </summary>
            <param name="i">Int</param>
            <param name="fieldOffset">Int64</param>
            <param name="buffer">byte[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetChar(System.Int32)">
            <summary>
            Gets the char value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            GetChars
            </summary>
            <param name="i">Int</param>
            <param name="fieldoffset">Int64</param>
            <param name="buffer">char[]</param>
            <param name="bufferoffset">Int</param>
            <param name="length">Int</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetData(System.Int32)">
            <summary>
            GetData
            </summary>
            <param name="i">Int</param>
            <returns>Int</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the property data type from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetDateTime(System.Int32)">
            <summary>
            Gets the date time value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetDecimal(System.Int32)">
            <summary>
            Gets the decimal value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetDouble(System.Int32)">
            <summary>
            Gets the double value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The property type from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetFloat(System.Int32)">
            <summary>
            Gets the float value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetGuid(System.Int32)">
            <summary>
            Gets the Guid value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetInt16(System.Int32)">
            <summary>
            Gets the short value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetInt32(System.Int32)">
            <summary>
            Gets the int value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetInt64(System.Int32)">
            <summary>
            Gets the long value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetName(System.Int32)">
            <summary>
            Gets the name of the property from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The name from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetOrdinal(System.String)">
            <summary>
            Gets the index of the property based on the property name.
            </summary>
            <param name="name">The index of the property.</param>
            <returns>The index of the property from property name.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetSchemaTable">
            <summary>
            Gets the table schema.
            </summary>
            <returns>An instance of the <i>System.Data.DataTable</i> with the table schema.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetString(System.Int32)">
            <summary>
            Gets the string value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetValue(System.Int32)">
            <summary>
            Gets the current value from the defined property index.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.GetValues(System.Object[])">
            <summary>
            Populates the values of the array of the current values of the current row.
            </summary>
            <param name="values">The array variable on which to populate the data.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.IsDBNull(System.Int32)">
            <summary>
            Gets a value that checks whether the value of the property from the desired index is equals to <i>System.DbNull.Value</i>.
            </summary>
            <param name="i">The index of the property.</param>
            <returns>The value from the property index.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.NextResult">
            <summary>
            Forwards the data reader to the next result.
            </summary>
            <returns>Returns true if the forward operation is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.Read">
            <summary>
            Forward the pointer into the next record.
            </summary>
            <returns>A value that indicates whether the movement is successful.</returns>
        </member>
        <member name="M:RepoDb.DataEntityListDataReader`1.ThrowExceptionIfNotAvailable">
            <summary>
            Throws an exception if the current data reader is not available.
            </summary>
        </member>
        <member name="T:RepoDb.DataEntityMapItem">
            <summary>
            An object used by <i>RepoDb.DataEntityMapper</i> to map a <i>RepoDb.DataEntity</i> object into database object.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityMapItem.#ctor">
            <summary>
            Creates an instance of <i>RepoDb.DataEntityMapItem</i> class.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityMapItem.Validate(RepoDb.Enumerations.Command,RepoDb.DataEntityMap)">
            <summary>
            Validates the entry of the mapping.
            </summary>
            <param name="command">The type of command this mapping is used to.</param>
            <param name="map">The mapping to be used before execution.</param>
        </member>
        <member name="M:RepoDb.DataEntityMapItem.On(RepoDb.Enumerations.Command,System.String,System.Data.CommandType)">
            <summary>
            Set a mapping for the current defined entity.
            </summary>
            <param name="command">The type of command this mapping is used to.</param>
            <param name="name">The name of the object from the database.</param>
            <param name="commandType">The command type to be used during execution.</param>
            <returns>The current instance of <i>RepoDb.DataEntityMapItem</i> that holds the mapping.</returns>
        </member>
        <member name="M:RepoDb.DataEntityMapItem.Set(RepoDb.Enumerations.Command,RepoDb.DataEntityMap)">
            <summary>
            Set a mapping for the current defined entity.
            </summary>
            <param name="command">The type of command this mapping is used to.</param>
            <param name="map">The mapping to be used before execution.</param>
            <returns>The current instance of <i>RepoDb.DataEntityMapItem</i> that holds the mapping.</returns>
        </member>
        <member name="M:RepoDb.DataEntityMapItem.Get(RepoDb.Enumerations.Command)">
            <summary>
            Gets the instance of <i>RepoDb.DataEntityMap</i> object based on the command mapping.
            </summary>
            <param name="command">The command specified on this mapping.</param>
            <returns>An instance of <i>RepoDb.DataEntityMap</i> that holds the mapping.</returns>
        </member>
        <member name="T:RepoDb.Extensions.MemberInfoExtension">
            <summary>
            Contains the extension methods for <i>System.Reflection.MemberInfo</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets a custom attribute defined on the member.
            </summary>
            <typeparam name="T">The custom attribute that is defined into the property.</typeparam>
            <param name="property">The type of where the custom attribute is defined.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.MemberInfoExtension.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Gets a custom attribute defined on the member.
            </summary>
            <param name="property">The type of where the custom attribute is defined.</param>
            <param name="type">The custom attribute that is defined into the member.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="T:RepoDb.Extensions.TypeExtension">
            <summary>
            Contains the extension methods type <i>System.Type</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.TypeExtension.GetCustomAttribute``1(System.Type)">
            <summary>
            Gets a custom attribute defined on the type.
            </summary>
            <typeparam name="T">The custom attribute that is defined into the type.</typeparam>
            <param name="type">The type of where the custom attribute is defined.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="T:RepoDb.Extensions.ArrayExtension">
            <summary>
            Contains the extension methods for <i>System.Array</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.OrderFieldExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.OrderField</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsEnumerable(RepoDb.OrderField)">
            <summary>
            Converts an instance of order field into an enumerable list of order fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <returns>An enumerable list of order fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsField(RepoDb.OrderField)">
            <summary>
            Converts an instance of order field into an enumerable list of fields.
            </summary>
            <param name="orderField">The order field instance to be converted.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.OrderFieldExtension.AsAliasField(RepoDb.OrderField,System.String)">
            <summary>
            Converts an instance of order field into an stringified alias-formatted string.
            </summary>
            <param name="orderField">The order field to be converted.</param>
            <param name="alias">The alias to be used for conversion.</param>
            <returns>A string value for the stringified alias-formatted converted string.</returns>
        </member>
        <member name="T:RepoDb.Extensions.FieldExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.Field</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.FieldExtension.AsEnumerable(RepoDb.Field)">
            <summary>
            Converts an instance of a field into an enumerable list of field.
            </summary>
            <param name="field">The field to be converted.</param>
            <returns>An enumerable list of field.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DataEntityExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.DataEntity</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.ValueToPrimaryType``1(System.Object)">
            <summary>
            Converts the value to the type of the primary property of the target data entity.
            </summary>
            <typeparam name="T">The type of the <i>DataEntity</i>.</typeparam>
            <param name="value">The value to be converted.</param>
            <returns>The converted value to primary property type.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetDataEntityChildrenData(System.Type)">
            <summary>
            Gets the recursive data of the target <i>DataEntity</i> object.
            </summary>
            <param name="type">The type of the target <i>DataEntity</i>.</param>
            <returns>An enumerable list of <i>RecursiveData</i> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetDataEntityChildrenData``1">
            <summary>
            Gets the recursive data of the target <i>DataEntity</i> object.
            </summary>
            <typeparam name="T">The type of the target <i>DataEntity</i>.</typeparam>
            <returns>An enumerable list of <i>RecursiveData</i> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetDataEntityChildrenData(RepoDb.DataEntity)">
            <summary>
            Gets the recursive data of the target <i>DataEntity</i> object.
            </summary>
            <param name="dataEntity">The target <i>DataEntity</i> object.</param>
            <returns>An enumerable list of <i>RecursiveData</i> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPropertiesFor``1(RepoDb.Enumerations.Command)">
            <summary>
            Gets the list of <i>System.Reflection.PropertyInfo</i> objects from the data entity class based on the
            target command.
            </summary>
            <typeparam name="T">The type of the data entity where to get the list of the properties.</typeparam>
            <param name="command">The target command.</param>
            <returns>The list of data entity properties based on the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPropertiesFor(RepoDb.DataEntity,RepoDb.Enumerations.Command)">
            <summary>
            Gets the list of <i>System.Reflection.PropertyInfo</i> objects from the data entity class based on the
            target command.
            </summary>
            <param name="dataEntity">The instance of the data entity where to get the list of the properties.</param>
            <param name="command">The target command.</param>
            <returns>The list of data entity properties based on the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetCommandType``1(RepoDb.Enumerations.Command)">
            <summary>
            Gets a mapped command type of the <i>DataEntity</i> object based on the target command.
            </summary>
            <typeparam name="T">The entity type where to get the mapped command type.</typeparam>
            <param name="command">The target command.</param>
            <returns>A command type object used by the data entity for the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetCommandType(RepoDb.DataEntity,RepoDb.Enumerations.Command)">
            <summary>
            Gets a mapped command type of the <i>DataEntity</i> object based on the target command.
            </summary>
            <param name="dataEntity">The instance of data entity where to get the mapped command type.</param>
            <param name="command">The target command.</param>
            <returns>A command type object used by the data entity for the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPrimaryProperty``1">
            <summary>
            Gets the primary key property of the <i>DataEntity</i> object. The identification of the primary key will be based on the availability of certain
            attributes and naming convention.
            The identification process:
            1. Checks the <i>RepoDb.Attributes.PrimaryKeyAttribute</i>.
            2. If #1 is not present, then it checks the name of the property must be equal to <i>Id</i>.
            3. If #2 is not present, then it checks the type name of the class appended by the word <i>Id</i>.
            4. If #3 is not present, then it checks the mapped name of the class appended by the word <i>Id</i>.
            </summary>
            <typeparam name="T">The type of the data entity where to get the primary key property.</typeparam>
            <returns>An instance of <i>System.Reflection.PropertyInfo</i> that corresponds to as a primary property of the data entity.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetPrimaryProperty(RepoDb.DataEntity)">
            <summary>
            Gets the primary key property of the <i>DataEntity</i> object. The identification of the primary key will be based on the availability of certain
            attributes and naming convention.
            The identification process:
            1. Checks the <i>RepoDb.Attributes.PrimaryKeyAttribute</i>.
            2. If #1 is not present, then it checks the name of the property must be equal to <i>Id</i>.
            3. If #2 is not present, then it checks the type name of the class appended by the word <i>Id</i>.
            4. If #3 is not present, then it checks the mapped name of the class appended by the word <i>Id</i>
            </summary>
            <param name="dataEntity">The instance of data entity where to get the primary key property.</param>
            <returns>An instance of <i>System.Reflection.PropertyInfo</i> that corresponds to as a primary property of the data entity.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName``1(RepoDb.Enumerations.Command)">
            <summary>
            Gets the mapped name of the data entity type on a target command. The identification process it to check the <i>RepoDb.Attributes.MapAttribute</i>
            and get the value of the <i>Name</i> property.
            </summary>
            <typeparam name="T">The type of the data entity where to get the mapped name.</typeparam>
            <param name="command">The target command.</param>
            <returns>A string that contains the mapped name for the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.GetMappedName(RepoDb.DataEntity,RepoDb.Enumerations.Command)">
            <summary>
            Gets the mapped name of the data entity type on a target command. The identification process it to check the <i>RepoDb.Attributes.MapAttribute</i>
            and get the value of the <i>Name</i> property.
            </summary>
            <param name="dataEntity">The instance of the data entity where to get the mapped name.</param>
            <param name="command">The target command.</param>
            <returns>A string that contains the mapped name for the target command.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.AsObject(RepoDb.DataEntity,RepoDb.QueryGroup)">
            <summary>
            Converts the <i>DataEntity</i> object into a dynamic object. During the conversion, the passed query groups are being merged.
            </summary>
            <param name="dataEntity">The <i>DataEntity</i> object to be converted.</param>
            <param name="queryGroup">The query group to be merged.</param>
            <returns>An instance of converted dynamic object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.AsObject(RepoDb.DataEntity)">
            <summary>
            Converts the <i>DataEntity</i> object into a dynamic object.
            </summary>
            <param name="dataEntity">The <i>DataEntity</i> object to be converted.</param>
            <returns>An instance of converted dynamic object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsBatchQueryable``1">
            <summary>
            Checks whether the data entity is batch queryable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is batch queryable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsBatchQueryable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is batch queryable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is batch queryable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsBulkInsertable``1">
            <summary>
            Checks whether the data entity is bulk insertable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is bulk insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsBulkInsertable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is bulk insertable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is bulk insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsCountable``1">
            <summary>
            Checks whether the data entity is countable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is countable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsCountable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is countable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is countable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsDeletableAll``1">
            <summary>
            Checks whether all data entity is deletable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether all the data entity is deletable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsDeletableAll(RepoDb.DataEntity)">
            <summary>
            Checks whether all data entity is deletable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether all the data entity is deletable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsDeletable``1">
            <summary>
            Checks whether the data entity is deletable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is deletable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsDeletable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is deletable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is deletable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsTruncatable``1">
            <summary>
            Checks whether the table can be truncated.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the table is truncatable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsTruncatable(RepoDb.DataEntity)">
            <summary>
            Checks whether the table can be truncated.
            </summary>
            <returns>A boolean value signifies whether the table is truncatable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineUpdateable``1">
            <summary>
            Checks whether the data entity is inline updateable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is inline updateable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineUpdateable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is inline updateable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is inline updateable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineInsertable``1">
            <summary>
            Checks whether the data entity is inline insertable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is inline insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineInsertable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is inline insertable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is inline insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineMergeable``1">
            <summary>
            Checks whether the data entity is inline mergeable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is inline mergeable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInlineMergeable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is inline mergeable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is inline mergeable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInsertable``1">
            <summary>
            Checks whether the data entity is insertable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsInsertable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is insertable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is insertable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsMergeable``1">
            <summary>
            Checks whether the data entity is mergeable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is mergeable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsMergeable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is mergeable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is mergeable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsQueryable``1">
            <summary>
            Checks whether the data entity is queryable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is queryable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsQueryable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is queryable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is queryable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsUpdateable``1">
            <summary>
            Checks whether the data entity is updateable.
            </summary>
            <typeparam name="T">The data entity type to be checked.</typeparam>
            <returns>A boolean value signifies whether the data entity is updateable.</returns>
        </member>
        <member name="M:RepoDb.Extensions.DataEntityExtension.IsUpdateable(RepoDb.DataEntity)">
            <summary>
            Checks whether the data entity is updateable.
            </summary>
            <param name="dataEntity">The data entity instance to be checked.</param>
            <returns>A boolean value signifies whether the data entity is updateable.</returns>
        </member>
        <member name="T:RepoDb.Extensions.DataReaderExtension">
            <summary>
            Contains the extension methods for <i>System.Data.IDataReader</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.DbCommandExtension">
            <summary>
            Contains the extension methods for <i>System.Data.IDbCommand</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.Extensions.ObjectExtension">
            <summary>
            Contains the extension methods for <i>System.Object</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Merge(System.Object,RepoDb.QueryGroup)">
            <summary>
            Merge the <i>RepoDb.QueryGroup</i> object into the current object.
            </summary>
            <param name="obj">The object where the <i>RepoDb.QueryGroup</i> object will be merged.</param>
            <param name="queryGroup">The <i>RepoDb.QueryGroup</i> object to merged.</param>
            <returns>The object instance itself with the merged values.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsQueryFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of query fields.
            </summary>
            <param name="obj">The instance of the object to be converted.</param>
            <returns>An enumerable list of query fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of field.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>An enumerable list of fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.AsOrderFields(System.Object)">
            <summary>
            Converts an instance of an object into an enumerable list of order fields.
            </summary>
            <param name="obj">The object to be converted.</param>
            <returns>An enumerable list of order fields.</returns>
        </member>
        <member name="M:RepoDb.Extensions.ObjectExtension.Coalesce(System.Object,System.Object[])">
            <summary>
            Returns the first non-null occurence.
            </summary>
            <param name="obj">The current object.</param>
            <param name="parameters">The list of parameters.</param>
            <returns>The first non-null object.</returns>
        </member>
        <member name="T:RepoDb.Extensions.PropertyInfoExtension">
            <summary>
            Contains the extension methods for <i>System.Reflection.PropertyInfo</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets a value of the property.
            </summary>
            <param name="property">The property where to get the value of the object.</param>
            <param name="obj">The object that contains the defined property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.SetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Sets a value of the property.
            </summary>
            <param name="property">The property where to set the value of the object.</param>
            <param name="obj">The object that contains the defined property.</param>
            <param name="value">The value to be set for the property.</param>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <typeparam name="T">The custom attribute that is defined into the property.</typeparam>
            <param name="property">The type of where the custom attribute is defined.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetCustomAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            Gets a custom attribute defined on the property.
            </summary>
            <param name="property">The type of where the custom attribute is defined.</param>
            <param name="type">The custom attribute that is defined into the property.</param>
            <returns>The custom attribute.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsEnumerable(System.Reflection.PropertyInfo)">
            <summary>
            Converts an instance of property info into an enumerable list of property info.
            </summary>
            <param name="property">The property info instance to be converted.</param>
            <returns>An enumerable list of property info.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.GetMappedName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the mapped name of the propery.
            </summary>
            <param name="property">The property where the mapped name will be retrieved.</param>
            <returns>A string containing the mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.IsRecursive(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the property info is a recursive property of the <i>DataEntity</i> object.
            </summary>
            <param name="property">The instance of the propery info to be checked.</param>
            <returns>A boolean value that signifies whether the property info is a recursive property of the <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.IsIgnored(System.Reflection.PropertyInfo,RepoDb.Enumerations.Command)">
            <summary>
            Checks whether the property info is being ignored by the repository operation on a given command.
            </summary>
            <param name="property">The instance of the propery info to be checked.</param>
            <param name="command">The command to be identified.</param>
            <returns>A boolean value that signifies whether the property info is being ignored by the repository operation.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.IsPrimary(System.Reflection.PropertyInfo)">
            <summary>
            Checks whether the property info is a primary property.
            </summary>
            <param name="property">The instance of property info to be checked.</param>
            <returns>A boolean value that holds a value whether the property info is a primary property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Converts a property info into a query field object.
            </summary>
            <param name="property">The instance of property info to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsQueryField(System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Converts a property info into a query field object.
            </summary>
            <param name="property">The instance of property info to be converted.</param>
            <param name="entity">The entity object where the value of the property will be retrieved.</param>
            <returns>An instance of query field object that holds the converted name and values of the property.</returns>
            <param name="appendParameterPrefix">
            The value to identify whether the underscope prefix will be appended to the parameter name.
            </param>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsJoinQualifier(System.Reflection.PropertyInfo,System.String,System.String)">
            <summary>
            Converts a property info into a string qualifier with defined aliases that is usable for SQL Statements.
            </summary>
            <param name="property">The property info to be converted.</param>
            <param name="leftAlias">The left alias to be used.</param>
            <param name="rightAlias">The right alias to be used.</param>
            <returns>A instance of string containing the value of converted property info with defined aliases.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsField(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a mapped name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a mapped name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameter(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a paramertized name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a parameterized name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameterAsField(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a paramertized (as field) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a parameterized (as field) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndParameter(System.Reflection.PropertyInfo)">
            <summary>
            Converts a property info into a field and parameter name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <returns>A instance of string containing the value of a field and parameter name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldAndAliasField(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Converts a property info into a field (and its alias) name.
            </summary>
            <param name="property">The instance of the property to be converted.</param>
            <param name="alias">The alias to be used.</param>
            <returns>A instance of string containing the value of a field (and its alias) name.</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParameters(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as parameters).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as parameters).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsParametersAsFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as parameters as fields).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as parameters as fields).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldsAndParameters(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field and parameters).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field and parameters).</returns>
        </member>
        <member name="M:RepoDb.Extensions.PropertyInfoExtension.AsFieldsAndAliasFields(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.String)">
            <summary>
            Converts an enumerable array of property info objects into an enumerable array of string (as field and its alias).
            </summary>
            <param name="properties">The enumerable array of properties to be converted.</param>
            <param name="alias">The alias to be used.</param>
            <returns>An enumerable array of strings containing the converted values of the given properties (as field and its alias).</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryFieldExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.QueryField</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryFieldExtension.AsEnumerable(RepoDb.QueryField)">
            <summary>
            Converts an instance of a query field into an enumerable list of query fields.
            </summary>
            <param name="queryField">The query field to be converted.</param>
            <returns>An enumerable list of query fields.</returns>
        </member>
        <member name="T:RepoDb.Extensions.QueryGroupExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.QueryGroup</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.QueryGroupExtension.AsEnumerable(RepoDb.QueryGroup)">
            <summary>
            Convert an instance of query group into an enumerable list of query groups.
            </summary>
            <param name="queryGroup">The query group to be converted.</param>
            <returns>An enumerable list of query groups.</returns>
        </member>
        <member name="T:RepoDb.Extensions.StringExtension">
            <summary>
            Contains the extension methods for <i>RepoDb.String</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins an array string with a given separator.
            </summary>
            <param name="strings">The enumerable list of strings.</param>
            <param name="separator">The separator to be used.</param>
            <returns>A joined string from a given array of strings separated by the defined separator.</returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsUnquoted(System.String)">
            <summary>
            Removes the database quotes from the string.
            </summary>
            <param name="value">The string value where the database quotes will be removed.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuoted(System.String,System.Boolean)">
            <summary>
            Adds a quotes to the string.
            </summary>
            <param name="value">The string value where the database quotes will be added.</param>
            <param name="trim">The boolean value that indicates whether to trim the string first before unquoting.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.Extensions.StringExtension.AsQuotedParameter(System.String,System.Boolean)">
            <summary>
            Adds a quotes to the string as a database parameter.
            </summary>
            <param name="value">The string value where the database quotes will be added.</param>
            <param name="trim">The boolean value that indicates whether to trim the string first before unquoting.</param>
            <returns></returns>
        </member>
        <member name="T:RepoDb.DataEntityMapper">
            <summary>
            A class that manage the mappings of a <i>RepoDb.DataEntity</i> object into database object.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityMapper.For(System.Type)">
            <summary>
            Create a new entity and database mapping.
            </summary>
            <param name="type">The type of command to be used for mapping.</param>
            <returns>An instance of <i>RepoDb.DataEntityMapItem</i> that is used for mapping.</returns>
        </member>
        <member name="M:RepoDb.DataEntityMapper.For``1">
            <summary>
            Creates a new entity and database mapping.
            </summary>
            <typeparam name="TEntity">The <i>RepoDb.DataEntity</i> type where to apply the mapping.</typeparam>
            <returns>An instance of <i>RepoDb.DataEntityMapItem</i> that is used for mapping.</returns>
        </member>
        <member name="T:RepoDb.DataEntityChildListData">
            <summary>
            A class used to handle the information of the <i>DataEntity</i> child list.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityChildListData.ChildListProperty">
            <summary>
            The property of the <i>DataEntity</i> children list.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityChildListData.ChildListType">
            <summary>
            The type of the child <i>DataEntity</i>.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityChildListData.ParentDataEntityType">
            <summary>
            The type of the parent <i>DataEntity</i>.
            </summary>
        </member>
        <member name="T:RepoDb.SqlDbHelper">
            <summary>
            A helper class for database specially for the direct access. This class is only meant for SQL Server.
            </summary>
        </member>
        <member name="M:RepoDb.SqlDbHelper.IsIdentity``1(System.String,RepoDb.Enumerations.Command,System.String)">
            <summary>
            Checks whether the column is identity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">The connection string object to be used.</param>
            <param name="command">The target command.</param>
            <param name="columnName">The name of the column.</param>
            <returns>A boolean value indicating the identification of the column.</returns>
        </member>
        <member name="T:RepoDb.StringConstant">
            <summary>
            A class that holds the constant values fo <i>RepoDb</i> library.
            </summary>
        </member>
        <member name="T:RepoDb.CacheItem">
            <summary>
            An item used when caching an object in the repository object. This is the default class used by the <i>RepoDb.MemoryCache</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.CacheItem.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.CacheItem</i> object.
            </summary>
            <param name="key">The key of the cache.</param>
            <param name="value">The value of the cache.</param>
        </member>
        <member name="M:RepoDb.CacheItem.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new instance of <i>RepoDb.CacheItem</i> object.
            </summary>
            <param name="key">The key of the cache item.</param>
            <param name="value">The value of the cache item.</param>
            <param name="expirationInMinutes">The expiration in minutes of the cache item.</param>
        </member>
        <member name="M:RepoDb.CacheItem.UpdateFrom(RepoDb.CacheItem)">
            <summary>
            Updates the value of the current item based from the source item.
            </summary>
            <param name="item">The source item.</param>
        </member>
        <member name="P:RepoDb.CacheItem.Key">
            <summary>
            Gets the key of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.Value">
            <summary>
            Gets or sets the value of the cache.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.CreatedDate">
            <summary>
            Gets the created timestamp of this cache item. By default, it is equals to the time
            of when this cache item object has been instantiated.
            </summary>
        </member>
        <member name="P:RepoDb.CacheItem.Expiration">
            <summary>
            Gets or sets the expiration date of this cache item.
            </summary>
        </member>
        <member name="M:RepoDb.CacheItem.IsExpired">
            <summary>
            Gets a value whether this cache item is expired.
            </summary>
            <returns>A boolean value that indicate whether this cache value is expired.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.IStatementBuilder">
            <summary>
            An interface used to mark a class to be a statement builder. The statement builder is an object being mapped or injected into the
            repositories to be used for composing the SQL Statements. Implement this interface if the caller would likely to support the different
            statement building approach, or by supporting the other data providers like Oracle, OleDb, MySql, etc.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateBatchQuery``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField})">
            <summary>
            Creates a SQL Statement for repository <i>BatchQuery</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields used for ordering.</param>
            <returns>A string containing the composed SQL Statement for <i>BatchQuery</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateCount``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Count</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Count</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDelete``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Delete</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Delete</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateDeleteAll``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>DeleteAll</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>DeleteAll</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInlineInsert``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineInsert</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of fields to be a part of the inline insert operation in SQL Statement composition.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline insert operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineInsert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInlineMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineMerge</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of the inline merge operation in SQL Statement composition.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline insert operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineMerge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInlineUpdate``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineUpdate</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of fields to be a part of the inline update operation in SQL Statement composition.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline update operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineUpdate</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateInsert``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>Insert</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Insert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Creates a SQL Statement for repository <i>Merge</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="qualifiers">The list of qualifier fields to be used for the <i>Merge</i> operation in SQL Statement composition.</param>
            <returns>A string containing the composed SQL Statement for <i>Merge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateQuery``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField})">
            <summary>
            Creates a SQL Statement for repository <i>Query</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="top">The number of rows to be returned by the <i>Query</i> operation in SQL Statement composition.</param>
            <param name="orderBy">The list of fields  to be used for ordering in SQL Statement composition.</param>
            <returns>A string containing the composed SQL Statement for <i>Query</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateTruncate``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>Truncate</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Truncate</i> operation.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.IStatementBuilder.CreateUpdate``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Update</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Update</i> operation.</returns>
        </member>
        <member name="T:RepoDb.Interfaces.ICache">
            <summary>
            An interface used to mark the class to be a cacher for an object.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add(System.String,System.Object)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Add(RepoDb.CacheItem)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="item">
            The cache item to be added in the collection.
            </param>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Get(System.String)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>An object from the cache collection based on the given key.</returns>
        </member>
        <member name="M:RepoDb.Interfaces.ICache.Remove(System.String)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">
            The key of the item to be removed from the cache collection. If the given key is not present, this method will ignore it.
            </param>
        </member>
        <member name="T:RepoDb.Interfaces.ITrace">
            <summary>
            An interface used to mark a class to be usable for tracing operations. A trace object is being used by the repositories on every operations
            (before or after) the actual execution. It provides the flexibility of the operations to be traceable and debuggable. The caller can modify
            the SQL Statements or the parameters being passed prior the actual execution, or even cancel the prior-execution.
            </summary>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeBatchQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>BatchQuery</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>BatchQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeBulkInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>BulkInsert</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>BulkInsert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeCount(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Count</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Count</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDelete(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Delete</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Delete</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeDeleteAll(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>DeleteAll</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>DeleteAll</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteNonQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>ExecuteNonQuery</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>ExecuteNonQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>ExecuteQuery</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>ExecuteQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteReader(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>ExecuteReader</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>ExecuteReader</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeExecuteScalar(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>ExecuteScalar</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>ExecuteScalar</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInlineInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>InlineInsert</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>InlineInsert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInlineMerge(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>InlineMerge</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>InlineMerge</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInlineUpdate(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>InlineUpdate</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>InlineUpdate</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeInsert(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Insert</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Insert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeMerge(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Merge</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Merge</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeQuery(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Query</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Query</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeTruncate(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Truncate</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Truncate</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.BeforeUpdate(RepoDb.CancellableTraceLog)">
            <summary>
            A method being raised before the actual <i>Update</i> operation execution.
            </summary>
            <param name="log">The cancellable log object referenced by the <i>Update</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterBatchQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>BatchQuery</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>BatchQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterBulkInsert(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>BulkInsert</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>BulkInsert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterCount(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Count</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Count</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDelete(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Delete</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Delete</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterDeleteAll(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>DeleteAll</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>DeleteAll</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteNonQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>ExecuteNonQuery</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>ExecuteNonQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>ExecuteQuery</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>ExecuteQuery</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteReader(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>ExecuteReader</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>ExecuteReader</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterExecuteScalar(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>ExecuteScalar</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>ExecuteScalar</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInlineInsert(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>InlineInsert</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>InlineInsert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInlineMerge(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>InlineMerge</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>InlineMerge</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInlineUpdate(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>InlineUpdate</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>InlineUpdate</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterInsert(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Insert</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Insert</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterMerge(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Merge</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Merge</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterQuery(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Query</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Query</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterTruncate(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Truncate</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Truncate</i> execution.</param>
        </member>
        <member name="M:RepoDb.Interfaces.ITrace.AfterUpdate(RepoDb.TraceLog)">
            <summary>
            A method being raised after the actual <i>Update</i> operation execution.
            </summary>
            <param name="log">The log object referenced by the <i>Update</i> execution.</param>
        </member>
        <member name="T:RepoDb.MemoryCache">
            <summary>
            An object used for caching a result in the repository <i>Query</i> operation. This object is the default
            memory cache object used by the <i>RepoDb</i> repositories.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.#ctor">
            <summary>
            Creates a new instance <i>RepoDb.MemoryCache</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Add(System.String,System.Object)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="key">The key to the cache.</param>
            <param name="value">The value of the cache.</param>
        </member>
        <member name="M:RepoDb.MemoryCache.Add(RepoDb.CacheItem)">
            <summary>
            Adds a cache item value.
            </summary>
            <param name="item">
            The cache item to be added in the collection. This object must implement the <i>RepoDb.CacheItem</i> interface.
            </param>
        </member>
        <member name="M:RepoDb.MemoryCache.Clear">
            <summary>
            Clears the collection of the cache.
            </summary>
        </member>
        <member name="M:RepoDb.MemoryCache.Contains(System.String)">
            <summary>
            Checks whether the key is present in the collection.
            </summary>
            <param name="key">The name of the key to be checked.</param>
            <returns>A boolean value that signifies the presence of the key from the collection.</returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Get(System.String)">
            <summary>
            Gets an object from the cache collection.
            </summary>
            <param name="key">The key of the cache object to be retrieved.</param>
            <returns>A cached item object from the cache collection based on the given key.</returns>
        </member>
        <member name="M:RepoDb.MemoryCache.GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of the cache collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RepoDb.MemoryCache.Remove(System.String)">
            <summary>
            Removes the item from the cache collection.
            </summary>
            <param name="key">
            The key of the item to be removed from the cache collection. If the given key is not present, this method will ignore it.
            </param>
        </member>
        <member name="M:RepoDb.MemoryCache.GetItem(System.String)">
            <summary>
            Gets the cached item by key. This includes the expired cached item.
            </summary>
            <param name="key">The key of the cached item.</param>
            <returns>The cached item based on the given key.</returns>
        </member>
        <member name="T:RepoDb.BaseRepository`2">
            <summary>
            An inherritable base object for all <b>Entity-Based Repositories</b>. This object is usually being inheritted if the 
            derived class is meant for entity-based operations with corresponding <i>DataEntity</i> object for data manipulations.
            </summary>
            <typeparam name="TEntity">
            The type of <i>DataEntity</i> object to be mapped on this repository. This object must inherit the <i>RepoDb.DataEntity</i>
            object in order to be qualified as a repository entity.
            </typeparam>
            <typeparam name="TDbConnection">The type of the <i>System.Data.Common.DbConnection</i> object.</typeparam>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <i>Single</i> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <i>PerCall</i> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <i>RepoDb.BaseRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.BaseRepository`2.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <i>Single</i> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <i>PerCall</i> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="P:RepoDb.BaseRepository`2.DbRepository">
            <summary>
            Gets the underlying repository used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.BaseRepository`2.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <i>ConnectionPersistency.PerCall</i>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection">
            <summary>
            Creates a new instance of the database connection. If the value <i>ConnectionPersistency</i> property is <i>Instance</i>, then this will return
            the <i>System.Data.Common.DbConnection</i> that is being used by the current repository instance. However, if the value of the <i>ConnectionPersistency</i>
            property is <i>PerCall</i>, then this will return a new instance of the <i>System.Data.Common.DbConnection</i> object.
            </summary>
            <returns>An instance of the <i>System.Data.Common.DbConnection</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <i>ConnectionPersistency</i> property is <i>Instance</i>, then this will return
            the <i>System.Data.Common.DbConnection</i> that is being used by the current repository instance. However, if the value of the <i>ConnectionPersistency</i>
            property is <i>PerCall</i>, then this will return a new instance of the <i>System.Data.Common.DbConnection</i> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <i>System.Data.Common.DbConnection</i> object regardless of the persistency.</param>
            <returns>An instance of the <i>System.Data.Common.DbConnection</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Dispose">
            <summary>
            Dispose the current repository instance (of type <i>RepoDb.BaseRepository</i>). It is not necessary to call this method if the value of the <i>ConnectionPersistency</i>
            property is equals to <i>ConnectionPersistency.PerCall</i>. This method only manages the connection persistency for the repositories where the value
            of the <i>ConnectionPersitency</i> property is equals to <i>ConnectionPersitency.Instance</i>.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQuery(RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch in an asynchronous way. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BatchQueryAsync(RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database.
            </summary>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.BulkInsertAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database in an asynchronous way.
            </summary>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Object,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Count(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Object,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.CountAsync(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Delete(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation. When is set to <i>NULL</i>, it deletes all the data from the database.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAsync(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineInsert(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineInsertAsync(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineMerge(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only. Uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineMerge(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineMergeAsync(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way. Uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineMergeAsync(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdate(System.Object,System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdate(System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdate(System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdateAsync(System.Object,System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdateAsync(System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InlineUpdateAsync(System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database.
            </summary>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database in an asynchronous way.
            </summary>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <param name="entity">The entity to be merged.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Merge(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database.
            </summary>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <param name="entity">The entity to be merged.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.MergeAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way.
            </summary>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database.
            </summary>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Query(RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database in an asynchronous way.
            </summary>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.QueryAsync(RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Truncate">
            <summary>
            Truncates a table from the database.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.TruncateAsync">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.Update(`0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database in an asynchronous way.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.UpdateAsync(`0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteReader</i> method of the 
            <i>System.Data.IDataReader</i> object and converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteNonQuery</i> method of the <i>System.Data.IDataReader</i> object and
            returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteNonQuery</i> method of the
            <i>System.Data.IDataReader</i> object and returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.BaseRepository`2.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="T:RepoDb.DataEntity">
            <summary>
            Acts as the base class of all <i>DataEntity</i> object.
            </summary>
        </member>
        <member name="T:RepoDb.DbRepository`1">
            <summary>
            A base object for all <b>Shared-Based Repositories</b>. This object is usually being inheritted if
            the derived class is meant for shared-based operations when it comes to data manipulations.
            This object is used by <i>RepoDb.BaseRepository</i> as an underlying repository for all its
            operations.
            </summary>
            <typeparam name="TDbConnection">The type of the <i>System.Data.Common.DbConnection</i> object.</typeparam>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operations by this repository.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <i>Single</i> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <i>PerCall</i> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
        </member>
        <member name="M:RepoDb.DbRepository`1.#ctor(System.String,System.Nullable{System.Int32},RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,RepoDb.Enumerations.ConnectionPersistency)">
            <summary>
            Creates a new instance of <i>RepoDb.DbRepository</i> object.
            </summary>
            <param name="connectionString">The connection string to be used by this repository.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on every operation by this repository.</param>
            <param name="cache">The cache object to be used by this repository. This object must implement the <i>RepoDb.Cache</i> interface.</param>
            <param name="trace">The trace object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="statementBuilder">The SQL statement builder object to be used by this repository. This object must implement the <i>RepoDb.Trace</i> interface.</param>
            <param name="connectionPersistency">
            The database connection persistency type. Setting to <i>Single</i> will make the repository re-used a single connection all throughout its lifespan. Setting 
            to <i>PerCall</i> will create a new connection object on every repository call.
            </param>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionString">
            <summary>
            Gets the connection used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.CommandTimeout">
            <summary>
            Gets the command timeout value in seconds that is being used by this repository on every operation.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Cache">
            <summary>
            Gets the cache object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.Trace">
            <summary>
            Gets the trace object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used by this repository.
            </summary>
        </member>
        <member name="P:RepoDb.DbRepository`1.ConnectionPersistency">
            <summary>
            Gets the database connection persistency used by this repository. The default value is <i>ConnectionPersistency.PerCall</i>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection">
            <summary>
            Creates a new instance of the database connection. If the value <i>ConnectionPersistency</i> property is <i>Instance</i>, then this will return
            the <i>System.Data.Common.DbConnection</i> that is being used by the current repository instance. However, if the value of the <i>ConnectionPersistency</i>
            property is <i>PerCall</i>, then this will return a new instance of the <i>System.Data.Common.DbConnection</i> object.
            </summary>
            <returns>An instance of the <i>System.Data.Common.DbConnection</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CreateConnection(System.Boolean)">
            <summary>
            Creates a new instance of the database connection. If the value <i>ConnectionPersistency</i> property is <i>Instance</i>, then this will return
            the <i>System.Data.Common.DbConnection</i> that is being used by the current repository instance. However, if the value of the <i>ConnectionPersistency</i>
            property is <i>PerCall</i>, then this will return a new instance of the <i>System.Data.Common.DbConnection</i> object.
            </summary>
            <param name="force">Set to true to forcely create a new instance of <i>System.Data.Common.DbConnection</i> object regardless of the persistency.</param>
            <returns>An instance of the <i>System.Data.Common.DbConnection</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Dispose">
            <summary>
            Dispose the current repository instance (of type <i>RepoDb.DbRepository</i>). It is not necessary to call this method if the value of the <i>ConnectionPersistency</i>
            property is equals to <i>ConnectionPersistency.PerCall</i>. This method only manages the connection persistency for the repositories where the value
            of the <i>ConnectionPersitency</i> property is equals to <i>ConnectionPersitency.Instance</i>.
            </summary>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQuery``1(RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch in an asynchronous way. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BatchQueryAsync``1(RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Data.IDbTransaction)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsert``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.BulkInsertAsync``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Count``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.CountAsync``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Delete``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(System.Object,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation. When is set to <i>NULL</i>, it deletes all the data from the database.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAsync``1(RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAll``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.DeleteAllAsync``1(System.Data.IDbTransaction)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineInsert``1(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the insert operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineInsertAsync``1(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the insert operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineMerge``1(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only. It uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineMerge``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineMergeAsync``1(System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way. Uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineMergeAsync``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdate``1(System.Object,System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdate``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdate``1(System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdateAsync``1(System.Object,System.Object,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdateAsync``1(System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InlineUpdateAsync``1(System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Insert``1(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.InsertAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Inserts a data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The entity to be merged.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Merge``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The entity to be merged.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.MergeAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Data.IDbTransaction)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Query``1(RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.QueryAsync``1(RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Data.IDbTransaction,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force the repository to query from the database.
            </param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Truncate``1">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
        </member>
        <member name="M:RepoDb.DbRepository`1.TruncateAsync``1">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.Update``1(``0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,System.Object,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.UpdateAsync``1(``0,RepoDb.QueryGroup,System.Data.IDbTransaction)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQuery``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteQueryAsync``1(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteReader</i> method of the 
            <i>System.Data.IDataReader</i> object and converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQuery(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteNonQuery</i> method of the <i>System.Data.IDataReader</i> object and
            returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteNonQueryAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteNonQuery</i> method of the
            <i>System.Data.IDataReader</i> object and returns the number of affected rows during the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalar(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbRepository`1.ExecuteScalarAsync(System.String,System.Object,System.Nullable{System.Data.CommandType},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="T:RepoDb.DbConnectionExtension">
            <summary>
            Contains the extension methods for <i>System.Data.IDbConnection</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CreateCommand(System.Data.IDbConnection,System.String,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Creates a command object.
            </summary>
            <param name="connection">The connection to be used when creating a command object.</param>
            <param name="commandText">The value of the <i>CommandText</i> property.</param>
            <param name="commandType">The value of the <i>CommandType</i> property.</param>
            <param name="commandTimeout">The value of the <i>CommandTimeout</i> property.</param>
            <param name="transaction">The value of the <i>Transaction</i> property (if present).</param>
            <returns>A command object instance containing the defined property values passed.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.EnsureOpen(System.Data.IDbConnection)">
            <summary>
            Ensure that the connection object is on open state.
            </summary>
            <param name="connection">The connection to be opened.</param>
            <returns>The instance of the current connection object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ValidateTransactionConnectionObject(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Validates whether the transaction object connection is object is equals to the connection object.
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.WhereToQueryGroup``1(System.Object)">
            <summary>
            Converts the <i>where</i> query expression to <i>RepoDb.QueryGroup</i> object.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <returns></returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQuery``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> objects.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch in an asynchronous way. The batching will vary on the page number and number of rows per batch defined on this
            operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Object,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BatchQueryAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Query the data from the database by batch based on the given query expression in an asynchronous way. The batching will vary on the page number and number of rows
            per batch defined by this operation. This operation is useful for paging purposes.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="page">The page of the batch to be used by this operation.</param>
            <param name="rowsPerBatch">The number of rows per batch to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.BulkInsertAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},RepoDb.Interfaces.ITrace)">
            <summary>
            Bulk-inserting the list of <i>DataEntity</i> objects in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entities">The list of the <i>Data Entities</i> to be bulk-inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Count``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.CountAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Counts the number of rows from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An integer value for the number of rows counted from the database based on the given query expression.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation. When is set to <i>NULL</i>, it deletes all the data from the database.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Delete``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAll``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i>.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.DeleteAllAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Deletes all data in the database based on the target <i>DataEntity</i> in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineInsert``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the insert operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineInsertAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The object that contains the targetted columns to be inserted.</param>
            <param name="overrideIgnore">True if to allow the insert operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineMerge``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data in the database by targetting certain fields only. It uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineMerge``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineMergeAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way. Uses the <i>PrimaryKey</i> as the default qualifier field.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineMergeAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be merged.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">True if to allow the merge operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdate``1(System.Data.IDbConnection,System.Object,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdate``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdate``1(System.Data.IDbConnection,System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdateAsync``1(System.Data.IDbConnection,System.Object,System.Object,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdateAsync``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InlineUpdateAsync``1(System.Data.IDbConnection,System.Object,RepoDb.QueryGroup,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database by targetting certain fields only in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The dynamic <i>DataEntity</i> object that contains the targetted columns to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="overrideIgnore">True if to allow the update operation on the properties with <i>RepoDb.Attributes.IgnoreAttribute</i> defined.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Insert``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a data in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.InsertAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Inserts a data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The <i>DataEntity</i> object to be inserted.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>
            The value of the <i>PrimaryKey</i> of the newly inserted <i>DataEntity</i> object. Returns <i>NULL</i> if the 
            <i>PrimaryKey</i> property is not present.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The entity to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Merge``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way. By default, this operation uses the <i>PrimaryKey</i> property as
            the qualifier.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The entity to be merged.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.MergeAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Merges an existing <i>DataEntity</i> object in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The entity to be merged.</param>
            <param name="qualifiers">
            The list of qualifer fields to be used during merge operation. The qualifers are the fields used when qualifying the condition
            (equation of the fields) of the source and destination tables.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Query``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryData``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryChildData``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.DataEntityChildListData},System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression recursively.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="what">The list of the children data list to be queried.</param>
            <param name="result">The result from previous query of the parent <i>DataEntity</i> objects.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,System.Object,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String,RepoDb.Interfaces.ICache,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.QueryAsync``1(System.Data.IDbConnection,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.Nullable{System.Int32},System.Data.IDbTransaction,System.String,RepoDb.Interfaces.ICache,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Query a data from the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="top">The top number of rows to be used by this operation.</param>
            <param name="orderBy">The order definition of the fields to be used by this operation.</param>
            <param name="cacheKey">
            The key to the cache. If the cache key is present in the cache, then the item from the cache will be returned instead. Setting this
            to <i>NULL</i> would force to query from the database.
            </param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="cache">The cache object to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <param name="recursive">
            The value that indicates whether the child <i>DataEntity</i> objects defined in the target <i>DataEntity</i> object will
            be included in the result of the query. The default value is <i>False</i>.
            </param>
            <param name="recursionDepth">
            Defines the depth of the recursion when querying the data from the database. By default, the value is <i>NULL</i> to enable the querying of all 
            child data entities defined on the targetted <i>DataEntity</i>. Maximum recursion of 15 cycles only to avoid cyclomatic overflow operation.
            </param>
            <returns>An enumerable list of <i>DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Truncate``1(System.Data.IDbConnection,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.TruncateAsync``1(System.Data.IDbConnection,System.Nullable{System.Int32},RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Truncates a table from the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.Update``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,System.Object,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression or primary key value to be used by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.UpdateAsync``1(System.Data.IDbConnection,``0,RepoDb.QueryGroup,System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Updates a data in the database based on the given query expression in an asynchronous way.
            </summary>
            <typeparam name="TEntity">The type of the <i>DataEntity</i> object.</typeparam>
            <param name="connection">The connection object to be used by this operation.</param>
            <param name="entity">The instance of <i>DataEntity</i> object to be updated.</param>
            <param name="where">The query expression to be used  by this operation.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used by this operation.</param>
            <param name="trace">The trace object to be used by this operation.</param>
            <param name="statementBuilder">The statement builder object to be used by this operation.</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of dynamic objects.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of dynamic objects containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQuery``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity to convert to.</typeparam>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteQueryAsync``1(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            converts the result back to an enumerable list of <i>DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The type of the data entity to convert to.</typeparam>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>
            An enumerable list of <i>DataEntity</i> object containing the converted results of the underlying <i>System.Data.IDataReader</i> object.
            </returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of the data reader object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteReaderAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteReader</i> method of the <i>System.Data.IDataReader</i> object and
            returns the instance of the data reader.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of the data reader object.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteNonQuery</i> method of the <i>System.Data.IDataReader</i> object and
            returns the number of affected rows during the execution.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteNonQueryAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database in asynchronous way. It uses the underlying <i>ExecuteNonQuery</i> method of the <i>System.Data.IDataReader</i> object and
            returns the number of affected rows during the execution.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An instance of integer that holds the number of rows affected by the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction)">
            <summary>
            Executes a query from the database. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="M:RepoDb.DbConnectionExtension.ExecuteScalarAsync(System.Data.IDbConnection,System.String,System.Object,System.Nullable{System.Data.CommandType},System.Nullable{System.Int32},System.Data.IDbTransaction,RepoDb.Interfaces.ITrace)">
            <summary>
            Executes a query from the database in an asynchronous way. It uses the underlying <i>ExecuteScalar</i> method of the <i>System.Data.IDataReader</i> object and
            returns the first occurence value (first column of first row) of the execution.
            </summary>
            <param name="connection">The connection to be used during execution.</param>
            <param name="commandText">The command text to be used on the execution.</param>
            <param name="param">
            The dynamic object to be used as parameter. This object must contain all the values for all the parameters
            defined in the <i>CommandText</i> property.
            </param>
            <param name="commandType">The command type to be used on the execution.</param>
            <param name="commandTimeout">The command timeout in seconds to be used on the execution.</param>
            <param name="transaction">The transaction to be used on the execution (if present).</param>
            <param name="trace">The trace object to be used on the execution (if present).</param>
            <returns>An object that holds the first occurence value (first column of first row) of the execution.</returns>
        </member>
        <member name="T:RepoDb.Parameter">
            <summary>
            An object that holds the value of the field parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.Parameter</i> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:RepoDb.Parameter.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <i>RepoDb.Parameter</i> object.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="appendPrefix">The value to identify whether the underscope prefix will be appended.</param>
        </member>
        <member name="P:RepoDb.Parameter.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
        </member>
        <member name="P:RepoDb.Parameter.Value">
            <summary>
            Gets the value of the parameter.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.AppendPrefix">
            <summary>
            Force to append prefix on the current parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.Parameter.ToString">
            <summary>
            Stringify the current object. Will return the format of <b>Name (Value)</b> text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RepoDb.OrderField">
            <summary>
            An object that holds a field for ordering purposes.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.#ctor(System.String,RepoDb.Enumerations.Order)">
            <summary>
            Creates a new instance of <i>RepoDb.OrderField</i> object.
            </summary>
            <param name="name">The name of the field to be ordered.</param>
            <param name="order">The ordering direction of the field.</param>
        </member>
        <member name="P:RepoDb.OrderField.Name">
            <summary>
            Gets the name of the current order field.
            </summary>
        </member>
        <member name="P:RepoDb.OrderField.Order">
            <summary>
            Gets the order direction of the field.
            </summary>
        </member>
        <member name="M:RepoDb.OrderField.GetOrderText">
            <summary>
            Gets the value of the <i>RepoDb.Attributes.TextAttribute.Text</i> thas was implemented on the ordering direction.
            </summary>
            <returns>The string containing the text value of the ordering direction.</returns>
        </member>
        <member name="M:RepoDb.OrderField.Parse(System.Object)">
            <summary>
            Parse an object to be used for ordering. The object can have multiple properties for ordering and each property must have
            a value of <i>RepoDb.Enumerations.Order</i> enumeration.
            </summary>
            <param name="obj">
            An object to be parsed. Ex:
            <i>new { LastName = Order.Descending, FirstName = Order.Ascending }</i>
            </param>
            <returns>An enumerable of <i>RepoDb.OrderField</i> object that holds the ordering values for every field.</returns>
        </member>
        <member name="T:RepoDb.Field">
            <summary>
            An object that signifies as data field in the query statement.
            </summary>
        </member>
        <member name="M:RepoDb.Field.#ctor(System.String)">
            <summary>
            Creates a new instance of <i>RepoDb.Field</i> object.
            </summary>
            <param name="name">The name of the field.</param>
        </member>
        <member name="P:RepoDb.Field.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="M:RepoDb.Field.ToString">
            <summary>
            Stringify the current field object.
            </summary>
            <returns>The string value equivalent to the name of the field.</returns>
        </member>
        <member name="M:RepoDb.Field.From(System.String[])">
            <summary>
            Creates an enumerable of <i>RepoDb.Field</i> objects that derived from the given array of string values.
            </summary>
            <param name="fields">The array of string values that signifies the name of the fields (for each item).</param>
            <returns>An enumerable of <i>RepoDb.Field</i> object.</returns>
        </member>
        <member name="M:RepoDb.Field.Parse(System.Object)">
            <summary>
            Parse an object and creates an enumerable of <i>RepoDb.Field</i> objects. Each field is equivalent
            to each property of the given object. The parse operation uses a reflection operation.
            </summary>
            <param name="obj">An object to be parsed.</param>
            <returns>An enumerable of <i>RepoDb.Field</i> objects.</returns>
        </member>
        <member name="T:RepoDb.QueryBuilder`1">
            <summary>
            An object used to compose a SQL Query Statement.
            </summary>
            <typeparam name="TEntity">An entity where the SQL Query Statement is bound to.</typeparam>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.ToString">
            <summary>
            Stringify the current object.
            </summary>
            <returns>
            Returns a string that corresponds to the composed SQL Query Statement. It uses the <i>GetString</i>
            method as its underlying method call.
            </returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.GetString">
            <summary>
            Gets the string that corresponds to the composed SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Clear">
            <summary>
            Clears the current composed SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Space">
            <summary>
            Append a space to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.NewLine">
            <summary>
            Appends a new-line to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.WriteText(System.String)">
            <summary>
            Writes a custom text to the SQL Query Statement.
            </summary>
            <param name="text">The text to be written.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Delete">
            <summary>
            Appends a word DELETE word to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.End">
            <summary>
            Appends a character ";" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Count">
            <summary>
            Appends a word COUNT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.CountBig">
            <summary>
            Appends a word COUNT_BIG to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Field(RepoDb.Field)">
            <summary>
            Appends a stringified fields to the SQL Query Statement.
            </summary>
            <param name="field">The list of fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsFrom(RepoDb.Enumerations.Command)">
            <summary>
            Appends a stringified fields to the SQL Query Statement by command.
            </summary>
            <param name="command">The mapped command where to get all the fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Append a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsAndParametersFrom(RepoDb.Enumerations.Command)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement by command.
            </summary>
            <param name="command">The mapped command where to get all the fields and parameters to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsAndParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsAndAliasFieldsFrom(RepoDb.Enumerations.Command,System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement by command with aliases.
            </summary>
            <param name="command">The mapped command where to get all the fields and parameters to be stringified.</param>
            <param name="alias">The alias to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.FieldsAndAliasFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field},System.String)">
            <summary>
            Appends a stringified fields and parameters to the SQL Query Statement by command with aliases.
            </summary>
            <param name="fields">The list fields to be stringified.</param>
            <param name="alias">The alias to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.From">
            <summary>
            Appends a word FROM to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.GroupByFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Appends a word GROUP BY and a stringified fields to the SQL Query Statement.
            </summary>
            <param name="fields">The fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.HavingCountFrom(RepoDb.QueryField)">
            <summary>
            Appends a word HAVING COUNT and a conditional field to the SQL Query Statement.
            </summary>
            <param name="queryField">The conditional field object used for composition.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Insert">
            <summary>
            Appends a word INSERT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.GroupBy">
            <summary>
            Appends a word GROUP BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.HavingCount">
            <summary>
            Appends a word HAVING COUNT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Into">
            <summary>
            Appends a word INTO to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Values">
            <summary>
            Appends a word VALUES to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.OrderByFrom(System.Collections.Generic.IEnumerable{RepoDb.OrderField},System.String)">
            <summary>
            Appends a word ORDER BY and the stringified fields to the SQL Query Statement with aliases.
            </summary>
            <param name="orderBy">The list of order fields to be stringified.</param>
            <param name="alias">The aliases to be prepended for each field.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.As(System.String)">
            <summary>
            Appends a word AS to the SQL Query Statement with alias.
            </summary>
            <param name="alias">The alias to be prepended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.With">
            <summary>
            Appends a word WITH to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Set">
            <summary>
            Appends a word SET to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Join">
            <summary>
            Appends a word JOIN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.JoinQualifiersFrom(RepoDb.Field,System.String,System.String)">
            <summary>
            Appends a stringified field as a joined qualifier to the SQL Query Statement with left and right aliases.
            </summary>
            <param name="field">The field to be stringified.</param>
            <param name="leftAlias">The left alias.</param>
            <param name="rightAlias">The right alias.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Merge">
            <summary>
            Appends a word MERGE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Table">
            <summary>
            Appends a word TABLE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.TableFrom(RepoDb.Enumerations.Command)">
            <summary>
            Appends the mapped entity name to the SQL Query Statement based on the mapped command.
            </summary>
            <param name="command">The command where the mapping is defined.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.ParametersFrom(RepoDb.Enumerations.Command)">
            <summary>
            Append the mapped properpties name to the SQL Query Statement based on the mapped command.
            </summary>
            <param name="command">The command where the mapping is defined.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.ParametersFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Append the stringified field parameters to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.ParametersAsFieldsFrom(RepoDb.Enumerations.Command)">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement based on the mapped command.
            </summary>
            <param name="command">The command where the mapping is defined.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.ParametersAsFieldsFrom(System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Append the stringified parameter as fields to the SQL Query Statement.
            </summary>
            <param name="fields">The list of fields to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Select">
            <summary>
            Appends a word SELECT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Top">
            <summary>
            Appends a word TOP to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.OrderBy">
            <summary>
            Appends a word ORDER BY to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Where">
            <summary>
            Appends a word WHERE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.TopFrom(System.Nullable{System.Int32})">
            <summary>
            Appends a word TOP and row number to the SQL Query Statement.
            </summary>
            <param name="rows">The row number to be appended.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Update">
            <summary>
            Appends a word UPDATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Using">
            <summary>
            Appends a word USING to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.WhereFrom(RepoDb.QueryGroup)">
            <summary>
            Appends a word WHERE and the stringified values of the Query Group to the SQL Query Statement.
            </summary>
            <param name="queryGroup">The query group to be stringified.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.RowNumber">
            <summary>
            Appends a word ROW_NUMBER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Over">
            <summary>
            Appends a word OVER to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.And">
            <summary>
            Appends a word AND to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Or">
            <summary>
            Appends a word OR to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.OpenParen">
            <summary>
            Appends a character "(" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.CloseParen">
            <summary>
            Appends a character ")" to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.On">
            <summary>
            Appends a word ON to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.In">
            <summary>
            Appends a word IN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Between">
            <summary>
            Appends a word BETWEEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.When">
            <summary>
            Appends a word WHEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Not">
            <summary>
            Appends a word NOT to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Matched">
            <summary>
            Appends a word MATCHED to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Then">
            <summary>
            Appends a word THEN to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Case">
            <summary>
            Appends a word CASE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryBuilder`1.Truncate">
            <summary>
            Appends a word TRUNCATE to the SQL Query Statement.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="T:RepoDb.QueryGroup">
            <summary>
            A widely-used object for defining the groupings for the query expressions. This object is used by most of the repository operations
            to define the filtering and query expressions for the actual execution.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.#ctor(System.Collections.Generic.IEnumerable{RepoDb.QueryField},System.Collections.Generic.IEnumerable{RepoDb.QueryGroup},RepoDb.Enumerations.Conjunction)">
            <summary>
            Creates a new instance of <i>RepoDb.QueryGroup</i> object.
            </summary>
            <param name="queryFields">The list of fields to be grouped for the query expressions.</param>
            <param name="queryGroups">The child query groups to be grouped for the query expressions.</param>
            <param name="conjunction">
            The conjunction to be used for every group seperation. The value could be <i>AND</i> or <i>OR</i>.
            Uses the <i>RepoDb.Enumerations.Conjunction</i> enumeration values.
            </param>
        </member>
        <member name="P:RepoDb.QueryGroup.Conjunction">
            <summary>
            Gets the conjunction used by this object..
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryFields">
            <summary>
            Gets the list of fields being grouped by this object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryGroup.QueryGroups">
            <summary>
            Gets the list of child query groups being grouped by this object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.AppendParametersPrefix">
            <summary>
            Force to append prefixes on the bound parameter objects.
            </summary>
        </member>
        <member name="M:RepoDb.QueryGroup.GetConjunctionText">
            <summary>
            Gets the text value of <i>RepoDb.Attributes.TextAttribute</i> implemented at the <i>Conjunction</i> property value of this instance.
            </summary>
            <returns>A string instance containing the value of the <i>RepoDb.Attributes.TextAttribute</i> text property.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetString">
            <summary>
            Gets the stringified query expression format of the current instance. A formatted string for field-operation-parameter will be
            conjuncted by the value of the <i>Conjunction</i> property.
            </summary>
            <returns>A stringified formatted-text of the current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.GetAllQueryFields">
            <summary>
            Gets all the child query groups associated on the current instance.
            </summary>
            <returns>An enumerable list of child query groups.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.FixParameters">
            <summary>
            Fixes the parameter naming convention. This method must be called atleast once prior the actual operation execution.
            Please note that every repository operation itself is calling this method before the actual execution.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="M:RepoDb.QueryGroup.Parse(System.Object)">
            <summary>
            This method is used to parse the customized query tree expression. This method expects a dynamic object and converts it to the actual
            <i>RepoDb.QueryGroup</i> that defines the query tree expression.
            </summary>
            <param name="obj">
            A dynamic query tree expression to be parsed.
            Example:
            var expression = new { Conjunction = Conjunction.And, Company = "Microsoft",
            FirstName = new { Operation = Operation.Like, Value = "An%" },
            UpdatedDate = new { Operation = Operation.LessThan, Value = DateTime.UtcNow.Date }}
            </param>
            <returns>An instance of the <i>RepoDb.QueryGroup</i> object that contains the parsed query expression.</returns>
        </member>
        <member name="T:RepoDb.QueryField">
            <summary>
            A class used to define the query expression for all repository operations. It holds the instances of field (<i>RepoDb.Field</i>),
            parameter (<i>RepoDb.Parameter</i>) and the target operation (<i>RepoDb.Enumeration.Operation</i>) of the query expression.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.QueryField</i> object./
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.QueryField</i> object./
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
        </member>
        <member name="M:RepoDb.QueryField.#ctor(System.String,RepoDb.Enumerations.Operation,System.Object,System.Boolean)">
            <summary>
            Creates a new instance of <i>RepoDb.QueryField</i> object./
            </summary>
            <param name="fieldName">The name of the field for the query expression.</param>
            <param name="operation">The operation to be used for the query expression.</param>
            <param name="value">The value to be used for the query expression.</param>
            <param name="appendParameterPrefix">
            The value to identify whether the underscope prefix will be appended to the parameter name.
            </param>
        </member>
        <member name="P:RepoDb.QueryField.Field">
            <summary>
            Gets the associated field object.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Operation">
            <summary>
            Gets the operation used by this instance.
            </summary>
        </member>
        <member name="P:RepoDb.QueryField.Parameter">
            <summary>
            Gets the associated parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.AppendParameterPrefix">
            <summary>
            Force to append prefix on the bound parameter object.
            </summary>
        </member>
        <member name="M:RepoDb.QueryField.GetOperationText">
            <summary>
            Gets the text value of <i>RepoDb.Attributes.TextAttribute</i> implemented at the <i>Operation</i> property value of this instance.
            </summary>
            <returns>A string instance containing the value of the <i>RepoDb.Attributes.TextAttribute</i> text property.</returns>
        </member>
        <member name="M:RepoDb.QueryField.ToString">
            <summary>
            Stringify the current instance of this object. Will return the stringified format of field and parameter in combine.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RepoDb.CancellableTraceLog">
            <summary>
            A cancellable tracing log object used in the tracing operations. This class holds the cancellable operations for all tracing logs.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.#ctor(System.Reflection.MethodBase,System.String,System.Object,System.Object)">
            <summary>
            Creates a new instance of <i>RepoDb.CancellableTraceLog</i> object.
            </summary>
            <param name="method">A method that will instantiate this trace log object.</param>
            <param name="statement">A SQL statement that was used in the trace operation.</param>
            <param name="parameter">An object that was used as a parameter in the operation.</param>
            <param name="result">A result of the operation.</param>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsCancelled">
            <summary>
            Gets a value whether the operation is cancelled.
            </summary>
        </member>
        <member name="P:RepoDb.CancellableTraceLog.IsThrowException">
            <summary>
            Gets a value whether an exception will be thrown after the <i>Cancel</i> method was called.
            </summary>
        </member>
        <member name="M:RepoDb.CancellableTraceLog.Cancel(System.Boolean)">
            <summary>
            Cancel the current executing repository operation.
            </summary>
            <param name="throwException">If true, an exception will be thrown.</param>
        </member>
        <member name="T:RepoDb.ObjectConverter">
            <summary>
            A class used for converting an object.
            </summary>
        </member>
        <member name="M:RepoDb.ObjectConverter.DbNullToNull(System.Object)">
            <summary>
            Converts a value to NULL if the value is equals to <i>System.DBNull.Value</i>, otherwise, returns the object value.
            </summary>
            <param name="value">The value to be checked for <i>System.DbNull.Value</i> value.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:RepoDb.Reflection.DataReaderConverter">
            <summary>
            A static classed used to convert the <i>System.Data.Common.DbDataReader</i> into <i>RepoDb.DataEntity</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.AsEntity``1(System.Data.Common.DbDataReader)">
            <summary>
            Converts the <i>System.Data.Common.DbDataReader</i> into <i>RepoDb.DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The <i>RepoDb.DataEntity</i> type to convert.</typeparam>
            <param name="reader">The <i>System.Data.Common.DbDataReader</i> to be converted.</param>
            <returns>An instance <i>RepoDb.DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable``1(System.Data.Common.DbDataReader)">
            <summary>
            Converts the <i>System.Data.Common.DbDataReader</i> into an enumerable of <i>RepoDb.DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The <i>RepoDb.DataEntity</i> type to convert.</typeparam>
            <param name="reader">The <i>System.Data.Common.DbDataReader</i> to be converted.</param>
            <returns>An array of <i>RepoDb.DataEntity</i> objects.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DataReaderConverter.ToEnumerable(System.Data.Common.DbDataReader)">
            <summary>
            Converts the <i>System.Data.Common.DbDataReader</i> into an enumerable of <i>System.Dynamic.ExpandoObject</i> object.
            </summary>
            <param name="reader">The <i>System.Data.Common.DbDataReader</i> to be converted.</param>
            <returns>An array of <i>System.Dynamic.ExpandoObject</i> objects.</returns>
        </member>
        <member name="T:RepoDb.Reflection.DelegateFactory">
            <summary>
            A static factor class used to create a delegate a custom delegate.
            </summary>
        </member>
        <member name="M:RepoDb.Reflection.DelegateFactory.GetDataReaderToDataEntityDelegate``1(System.Data.Common.DbDataReader)">
            <summary>
            Gets a delegate that is used to convert the <i>System.Data.Common.DbDataReader</i> object into <i>RepoDb.DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The <i>RepoDb.DataEntity</i> object to convert to.</typeparam>
            <param name="reader">The <i>System.Data.Common.DbDataReader</i> to be converted.</param>
            <returns>An instance of <i>RepoDb.DataEntity</i> object.</returns>
        </member>
        <member name="M:RepoDb.Reflection.DelegateFactory.GetDataReaderToExpandoObjectDelegate(System.Data.Common.DbDataReader)">
            <summary>
            Gets a delegate that is used to convert the <i>System.Data.Common.DbDataReader</i> object into <i>RepoDb.DataEntity</i> object.
            </summary>
            <param name="reader">The <i>System.Data.Common.DbDataReader</i> to be converted.</param>
            <returns>An instance of <i>RepoDb.DataEntity</i> object.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToDataEntityDelegate`1">
            <summary>
            A delegate used to map the <i>System.Data.Common.DbDataReader</i> into <i>RepoDb.DataEntity</i> object.
            </summary>
            <typeparam name="TEntity">The <i>RepoDb.DataEntity</i> object to map.</typeparam>
            <param name="dataReader">An instance of <i>System.Data.Common.DbDataReader</i> to be mapped.</param>
            <returns>An instance of <i>RepoDb.DataEntity</i> object containing the values from the <i>System.Data.Common.DbDataReader</i> object.</returns>
        </member>
        <member name="T:RepoDb.Reflection.Delegates.DataReaderToExpandoObjectDelegate">
            <summary>
            A delegate used to map the <i>System.Data.Common.DbDataReader</i> into <i>System.Dynamic.ExpandoObject</i> object.
            </summary>
            <param name="dataReader">An instance of <i>System.Data.Common.DbDataReader</i> to be mapped.</param>
            <returns>An instance of <i>System.Dynamic.ExpandoObject</i> object containing the values from the <i>System.Data.Common.DbDataReader</i> object.</returns>
        </member>
        <member name="T:RepoDb.SqlDbStatementBuilder">
            <summary>
            A class used to build a SQL Statement for SQL Server. This is the default statement builder used by the library.
            </summary>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.#ctor">
            <summary>
            Creates a new instance of <i>RepoDb.SqlDbStatementBuilder</i> object.
            </summary>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateBatchQuery``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{RepoDb.OrderField})">
            <summary>
            Creates a SQL Statement for repository <i>BatchQuery</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="page">The page of the batch.</param>
            <param name="rowsPerBatch">The number of rows per batch.</param>
            <param name="orderBy">The list of fields used for ordering.</param>
            <returns>A string containing the composed SQL Statement for <i>BatchQuery</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateCount``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Count</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Count</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateDelete``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Delete</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Delete</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateDeleteAll``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>DeleteAll</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>DeleteAll</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInlineInsert``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineInsert</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of the inline insert operation in SQL Statement composition.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline insert operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineInsert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInlineInsert``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Creates a SQL Statement for repository <i>InlineInsert</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of the inline insert operation in SQL Statement composition.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline insert operation in SQL Statement composition.
            </param>
            <param name="isPrimaryIdentity">A boolean value indicates whether the primary key is identity in the database.</param>
            <returns>A string containing the composed SQL Statement for <i>InlineInsert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInlineMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineMerge</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of the inline merge operation in SQL Statement composition.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline merge operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineMerge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInlineMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Creates a SQL Statement for repository <i>InlineMerge</i> operation.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of the inline merge operation in SQL Statement composition.</param>
            <param name="qualifiers">The list of the qualifier fields to be used by the inline merge operation on a SQL Statement.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored in the inline merge operation in SQL Statement composition.
            </param>
            <param name="isPrimaryIdentity">A boolean value indicates whether the primary key is identity in the database.</param>
            <returns>A string containing the composed SQL Statement for <i>InlineMerge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInlineUpdate``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},RepoDb.QueryGroup,System.Nullable{System.Boolean})">
            <summary>
            Creates a SQL Statement for repository <i>InlineUpdate</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="fields">The list of the fields to be a part of inline update operation in SQL Statement composition.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="overrideIgnore">
            Set to <i>true</i> if the defined <i>RepoDb.Attributes.IgnoreAttribute</i> would likely 
            be ignored on the inline update operation in SQL Statement composition.
            </param>
            <returns>A string containing the composed SQL Statement for <i>InlineUpdate</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInsert``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>Insert</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Insert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateInsert``1(RepoDb.QueryBuilder{``0},System.Boolean)">
            <summary>
            Creates a SQL Statement for repository <i>Insert</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="isPrimaryIdentity">A boolean value indicates whether the primary key is identity in the database.</param>
            <returns>A string containing the composed SQL Statement for <i>Insert</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field})">
            <summary>
            Creates a SQL Statement for repository <i>Merge</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="qualifiers">The list of qualifier fields to be used for the <i>Merge</i> operation in SQL Statement composition.</param>
            <returns>A string containing the composed SQL Statement for <i>Merge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateMerge``1(RepoDb.QueryBuilder{``0},System.Collections.Generic.IEnumerable{RepoDb.Field},System.Boolean)">
            <summary>
            Creates a SQL Statement for repository <i>Merge</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="qualifiers">The list of qualifier fields to be used for the <i>Merge</i> operation in SQL Statement composition.</param>
            <param name="isPrimaryIdentity">A boolean value indicates whether the primary key is identity in the database.</param>
            <returns>A string containing the composed SQL Statement for <i>Merge</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateQuery``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup,System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{RepoDb.OrderField})">
            <summary>
            Creates a SQL Statement for repository <i>Query</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <param name="top">The number of rows to be returned by the <i>Query</i> operation in SQL Statement composition.</param>
            <param name="orderBy">The list of fields  to be used for ordering in SQL Statement composition.</param>
            <returns>A string containing the composed SQL Statement for <i>Query</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateTruncate``1(RepoDb.QueryBuilder{``0})">
            <summary>
            Creates a SQL Statement for repository <i>Truncate</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Truncate</i> operation.</returns>
        </member>
        <member name="M:RepoDb.SqlDbStatementBuilder.CreateUpdate``1(RepoDb.QueryBuilder{``0},RepoDb.QueryGroup)">
            <summary>
            Creates a SQL Statement for repository <i>Update</i> operation that is meant for SQL Server.
            </summary>
            <typeparam name="TEntity">
            The <i>DataEntity</i> object bound for the SQL Statement to be created.
            </typeparam>
            <param name="queryBuilder">An instance of query builder used to build the SQL statement.</param>
            <param name="where">The query expression for SQL statement.</param>
            <returns>A string containing the composed SQL Statement for <i>Update</i> operation.</returns>
        </member>
        <member name="T:RepoDb.StatementBuilderMap">
            <summary>
            A class used as an map-item when mapping a statement builder (typeof <i>RepoDb.Interfaces.IStatementBuilder</i>)
            to be used for every connection type (typeof <i>System.Data.DbConnection</i>).
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilderMap.#ctor(System.Type,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a new instance of <i>RepoDb.StatementBuilderMap</i> object.
            </summary>
            <param name="dbConnectionType">
            The target type of the database connection to be used for mapping. This must be of type <i>System.Data.DbConnection</i>, or else,
            an argument exception will be thrown.
            </param>
            <param name="statementBuilder">The statement builder to be used for mapping.</param>
        </member>
        <member name="P:RepoDb.StatementBuilderMap.DbConnectionType">
            <summary>
            Gets the type of the database connection object that is being used for mapping.
            </summary>
        </member>
        <member name="P:RepoDb.StatementBuilderMap.StatementBuilder">
            <summary>
            Gets the statement builder object that is being used for mapping.
            </summary>
        </member>
        <member name="T:RepoDb.StatementBuilderMapper">
            <summary>
            A static class used to map a statement builder (typeof <i>RepoDb.Interfaces.IStatementBuilder</i>) object into a database connection type
            (typeof <i>System.Data.DbConnection</i>) object. The mapping defines by this class will bypass all the mappings made on the repository
            level for the specified database connection type.
            </summary>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Get(System.Type)">
            <summary>
            Gets an instance of mapping defined for the target type.
            </summary>
            <param name="dbConnectionType">
            The target type of the database connection to be used for mapping. This must be of type <i>System.Data.DbConnection</i>, or else,
            an argument exception will be thrown.
            </param>
            <returns>An instance of <i>RepoDb.Interfaces.StatementBuilderMap</i> defined on the mapping.</returns>
        </member>
        <member name="M:RepoDb.StatementBuilderMapper.Map(System.Type,RepoDb.Interfaces.IStatementBuilder)">
            <summary>
            Creates a mapping between the statement builder (typeof <i>RepoDb.Interfaces.IStatementBuilder</i>) object and database connection type
            (typeof <i>System.Data.DbConnection</i>) object.
            </summary>
            <param name="dbConnectionType">
            The target type of the database connection to be used for mapping. This must be of type <i>System.Data.DbConnection</i>, or else,
            an argument exception will be thrown.
            </param>
            <param name="statementBuilder">
            The statement builder to be mapped (typeof <i>RepoDb.Interfaces.IStatementBuilder</i>).
            </param>
        </member>
        <member name="T:RepoDb.TraceLog">
            <summary>
            A tracing log object used in the tracing operations.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Method">
            <summary>
            Gets the method that triggers the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Result">
            <summary>
            Gets the actual result of the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Parameter">
            <summary>
            Gets or sets the parameter object used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.Statement">
            <summary>
            Gets or sets the SQL Statement used on the actual operation execution.
            </summary>
        </member>
        <member name="P:RepoDb.TraceLog.ExecutionTime">
            <summary>
            Gets the actual length of the operation execution.
            </summary>
        </member>
        <member name="T:RepoDb.DataEntityMap">
            <summary>
            An object used to map a <i>RepoDb.DataEntity</i> object into database object.
            </summary>
        </member>
        <member name="M:RepoDb.DataEntityMap.#ctor(System.String,System.Data.CommandType)">
            <summary>
            Creates an instance of <i>RepoDb.ObjectMap</i> class.
            </summary>
            <param name="name">The name of database object.</param>
            <param name="commandType">The type of command used during execution.</param>
        </member>
        <member name="P:RepoDb.DataEntityMap.Name">
            <summary>
            Gets the name of database object being mapped.
            </summary>
        </member>
        <member name="P:RepoDb.DataEntityMap.CommandType">
            <summary>
            Gets the type of command used during execution.
            </summary>
        </member>
        <member name="T:RepoDb.TypeMap">
            <summary>
            A type mapping object that holds the mapping between the .NET CLR Types and database types.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMap.#ctor(System.Type,System.Data.DbType)">
            <summary>
            Creates a a new instance of <i>RepoDb.TypeMap</i> object.
            </summary>
            <param name="type">The .NET CLR Type to be mapped.</param>
            <param name="dbType">The database type to map (typeof <i>System.Data.DbType</i>).</param>
        </member>
        <member name="P:RepoDb.TypeMap.Type">
            <summary>
            Gets the .NET CLR Type used for mapping.
            </summary>
        </member>
        <member name="P:RepoDb.TypeMap.DbType">
            <summary>
            Gets the database type used for mapping.
            </summary>
        </member>
        <member name="T:RepoDb.TypeMapper">
            <summary>
            A static class used to map the .NET CLR Types into database types.
            </summary>
        </member>
        <member name="P:RepoDb.TypeMapper.TypeMaps">
            <summary>
            Gets the list of type-mapping objects.
            </summary>
        </member>
        <member name="M:RepoDb.TypeMapper.AddMap(System.Type,System.Data.DbType)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="type">The .NET CLR Type to be mapped.</param>
            <param name="dbType">The database type where to map the .NET CLR Type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.AddMap(RepoDb.TypeMap)">
            <summary>
            Adds a mapping between .NET CLR Type and database type.
            </summary>
            <param name="typeMap">The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</param>
        </member>
        <member name="M:RepoDb.TypeMapper.Get(System.Type)">
            <summary>
            Gets the instance of type-mapping object that holds the mapping of .NET CLR Type and database type.
            </summary>
            <param name="type">The .NET CLR Type used for mapping.</param>
            <returns>The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</returns>
        </member>
        <member name="M:RepoDb.TypeMapper.Get``1">
            <summary>
            Gets the instance of type-mapping object that holds the mapping of .NET CLR Type and database type.
            </summary>
            <typeparam name="T">The dynamic .NET CLR Type used for mapping.</typeparam>
            <returns>The instance of type-mapping object that holds the mapping of .NET CLR Type and database type.</returns>
        </member>
    </members>
</doc>
